import '../rakelib/gtest.rake'
import '../rakelib/arduino.rake'
build_path = Pathname "tmp"
dot_o = ->(file) { build_path.join File.basename "#{file}.o" }
directory build_path.to_s

sources = %w[sequence.cpp ../libraries/interrupt_button.cpp ../libraries/pin.cpp]
sources.each do |source|
  file dot_o[source] => [source, build_path] do |t|
    sh "avr-gcc -I ../libraries #{CXX_FLAGS} -c #{source} -o #{t.name}"
  end
end

task(:clean) { FileUtils.rm_rf build_path }

file build_path.join('sequence.elf') => sources.map(&dot_o) + %w[arduino] do |t|
  sh "avr-gcc -Os -Wl,--gc-sections -L. -lm -mmcu=atmega328p -o #{t.name} #{sources.map(&dot_o).join ' '} #$arduino_lib"
end

file build_path.join('sequence.hex') => build_path.join('sequence.elf') do |t|
  sh "avr-objcopy -O ihex -R .eeprom #{t.prerequisites.first} #{t.name}"
end

task build: build_path.join('sequence.hex')
task default: :build

task upload: :build do |t|
  port = Dir['/dev/tty.usbmodem*'].first or raise "plug the arduino in!"
  sh "avrdude -v -v -pm328p -carduino -P #{port} -U flash:w:sequence.hex:i"
end

namespace :test do
  file 'sequence.o' => 'sequence.cpp' do |t|
    sh "c++ -c -I../libraries #{t.prerequisites.first}"
  end

  file 'test' => %i[sequence.o gtest] do |t|
    sh "c++ -o #{t.name} sequence.o #$gtest_lib"
  end
end
