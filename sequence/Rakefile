require 'rake/loaders/makefile'
import '../rakelib/gtest.rake'
import '../rakelib/arduino.rake'
require 'tempfile'

($CXX_FLAGS ||= '') << " -I ../libraries"
sources = FileList['*.cpp', '../libraries/poll_button.cpp', '../libraries/pin.cpp']
file ".depends.mf" => sources.to_a do |t|
  Tempfile.open 'makedepend.err' do |err|
    system "makedepend -Y -f- -- #$CXX_FLAGS -- #{sources} > #{t.name}", err: err
    puts err.tap(&:rewind).read.split("\n").grep(/warning/).select { |line| !line.include? $arduino_path.to_s }
  end
end

import ".depends.mf"

sources.each do |source|
  file source.ext('o') => source do |t|
    sh "avr-gcc -I ../libraries #$CXX_FLAGS -c #{source} -o #{t.name}"
  end
end

task(:clean) { FileUtils.rm_rf sources.ext('o').add 'main.hex', 'main.elf' }

file 'main.hex' => sources.ext('o')
task default: :build

namespace :test do
  test_sources = FileList['test/*_test.cpp']
  includes = "-I../gtest/include -I. -I../libraries"
  test_sources.each do |source|
    file source.ext('o') => source do |t|
      sh "c++ #{source} #{includes} -Wno-c++11-extensions -c -o #{t.name}"
    end
  end

  file '.test.depends.mf' => test_sources.to_a do |t|
    sh "makedepend -Y -f- -- #{includes} -- #{test_sources} > #{t.name} 2> /dev/null"
  end

  import '.test.depends.mf'

  file 'test/run' => test_sources.ext('o') do |t|
    sh "c++ -o #{t.name} #{t.prerequisites.join ' '}"
  end
  task(:clean) { FileUtils.rm_rf test_sources.ext('o').add 'test/run' }
end
