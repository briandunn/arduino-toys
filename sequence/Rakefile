require 'rake/loaders/makefile'
load '../rakelib/gtest.rake'
load '../rakelib/arduino.rake'
build_path = Pathname "tmp"
hex = build_path.join 'payload.hex'
elf = build_path.join 'payload.elf'
dot_o = ->(file) { build_path.join File.basename(file).gsub /\.[^\.]+$/, '.o' }
directory build_path.to_s

CXX_FLAGS << " -I ../libraries"
SOURCES = FileList['*.h', '*.cpp']
file ".depends.mf" => SOURCES.to_a do |t|
  sh "makedepend -Y -f- -ptmp/ -- #{CXX_FLAGS} -- #{SOURCES} > #{t.name} 2> /dev/null"
end

import ".depends.mf"

sources = %w[sequence.cpp ../libraries/poll_button.cpp ../libraries/pin.cpp]
sources.each do |source|
  file dot_o[source] => [source, build_path] do |t|
    sh "avr-gcc -I ../libraries #{CXX_FLAGS} -c #{source} -o #{t.name}"
  end
end

task(:clean) { FileUtils.rm_rf build_path }

file elf => sources.map(&dot_o) + [$arduino_lib] do |t|
  sh "avr-gcc -Os -Wl,--gc-sections -L. -lm -mmcu=atmega328p -o #{t.name} #{t.prerequisites.join ' '}"
end

file hex => elf do |t|
  sh "avr-objcopy -O ihex -R .eeprom #{t.prerequisites.first} #{t.name}"
end

task build: hex
task default: :build

task upload: :build do |t|
  port = Dir['/dev/tty.usbmodem*'].first or raise "plug the arduino in!"
  sh "avrdude -v -v -pm328p -carduino -P #{port} -U flash:w:#{hex}:i"
end

namespace :test do
  test_build_path = Pathname 'test/tmp'
  dot_o = ->(file) { test_build_path.join File.basename(file).gsub /\.[^\.]+$/, '.o' }
  executable = test_build_path.join 'run'
  directory test_build_path.to_s
  source = %[test/sequence_test.cpp]
  file dot_o[source] => [source, 'game.h', test_build_path] do |t|
    sh "c++ -c -I ../gtest/include -I ../libraries -I. #{source} -o #{t.name}"
  end

  file executable => [dot_o[source], $gtest_lib] do |t|
    sh "c++ -o #{t.name} #{t.prerequisites.join ' '}"
  end
  task all: executable do
    sh executable.to_s
  end
  task(:clean) { FileUtils.rm_rf test_build_path }
end
task test: 'test:all'
