dot_o = ->(file) {"#{File.basename file}.o"}

import '../rakelib/gtest.rake'
import '../rakelib/arduino.rake'
namespace :test do
  build_path = Pathname 'test'
  lib_path   = Pathname '../libraries'
  test_sources  = %w[round_test.cc interrupt_button_test.cc]
  sources       = %w[interrupt_button.cpp poll_button.cpp].map {|source| lib_path.join source }

  for source in test_sources
    file build_path.join(dot_o[source]) => "test/#{source}" do |t|
      sh "c++ -c -I. -Itest -I../libraries -I../gtest/include #{t.prerequisites.first} -o #{t.name}"
    end
  end

  for source in sources
    file build_path.join(dot_o[source]) => source do |t|
      sh "c++ -c -Itest #{t.prerequisites.first} -o #{t.name}"
    end
  end

  dependencies = (sources + test_sources).map {|source| build_path.join dot_o[source] }
  file build_path.join('test') => dependencies + %i[gtest] do |t|
    sh "c++ -o #{t.name} #{dependencies.join ' '} #$gtest_lib"
  end

  task all: build_path.join('test') do |t|
    sh "./#{t.prerequisites.first}"
  end

  task :clean do
    sh "rm #{dependencies.join ' ' } #{build_path.join 'test' }"
  end
end

task test: 'test:all'

sources = %w[pressit.cpp ../libraries/pin.cpp ../libraries/poll_button.cpp]
for source in sources
  file dot_o[source] => source do |t|
    sh "avr-gcc #{CXX_FLAGS} -c #{t.prerequisites.first} -o #{t.name}"
  end
end

file 'pressit.elf' => sources.map(&dot_o) + %w[arduino] do |t|
  sh "avr-gcc -Os -Wl,--gc-sections -L. -lm -mmcu=atmega328p -o #{t.name} #{sources.map(&dot_o).join ' '} #$arduino_lib"
end

file 'pressit.hex' => 'pressit.elf' do |t|
  sh "avr-objcopy -O ihex -R .eeprom #{t.prerequisites.first} #{t.name}"
end

task build: 'pressit.hex'
task default: :build

task upload: :build do |t|
  port = Dir['/dev/tty.usbmodem*'].first or raise "plug the arduino in!"
  sh "avrdude -v -v -pm328p -carduino -P #{port} -U flash:w:pressit.hex:i"
end

task :clean do
  sh "rm *.o *.d *.a *.hex *.elf"
end
